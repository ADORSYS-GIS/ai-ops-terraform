name: Deploy ArgoCD to K3s with Terraform

on:
  push:
    branches: [argocd-setup]
  workflow_dispatch:

env:
  KUBECONFIG: ${{ github.workspace }}/.kube/config

jobs:
  deploy-argocd:
    runs-on: ubuntu-latest


    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up K3s cluster
      run: |
        curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION=v1.29.0 K3S_KUBECONFIG_MODE=777 sh -
        mkdir -p ${{ github.workspace }}/.kube
        sudo cp /etc/rancher/k3s/k3s.yaml "${{ github.workspace }}/.kube/config"
        sudo chmod 644 "${{ github.workspace }}/.kube/config"
        sed -i 's/127.0.0.1/localhost/g' "${{ github.workspace }}/.kube/config"
        echo "KUBECONFIG=${{ github.workspace }}/.kube/config" >> $GITHUB_ENV      
    - name: Verify K3s installation
      run: |
        sudo systemctl status k3s.service --no-pager || true
        journalctl -u k3s.service --no-pager -n 20 || true
        timeout 60s bash -c 'until sudo kubectl get nodes 2>/dev/null; do sleep 2; done'

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Set up Helm
      uses: azure/setup-helm@v4
      with:
        version: 'v3.13.0'

    - name: Configure Kubernetes context
      run: |
        # Verify cluster access
        kubectl cluster-info
        kubectl get nodes

    - name: Terraform Init in argocd module
      run: |
        cd modules/argocd
        terraform init

    - name: Comment out upgrade_install argument in module
      run: |
        cd modules/argocd
        ls -la
        sed -i 's/^\(\s*\)upgrade_install/\1# upgrade_install/' .terraform/modules/argocd/main.tf
        echo "Commented out upgrade_install line:"
        grep -n "upgrade_install" .terraform/modules/argocd/main.tf

    - name: Terraform Apply in argocd module
      run: |
        cd modules/argocd
        terraform apply -auto-approve

    - name: Verify ArgoCD installation
      run: |
        # Wait for ArgoCD pods to be ready
        kubectl wait --namespace argocd \
          --for=condition=ready pod \
          --selector=app.kubernetes.io/name=argocd-server \
          --timeout=300s
        
        # Check ArgoCD status
        kubectl get pods -n argocd
        kubectl get svc -n argocd

    - name: Get ArgoCD admin password
      run: |
        # Retrieve initial admin password
        kubectl -n argocd get secret argocd-initial-admin-secret \
          -o jsonpath="{.data.password}" | base64 -d

